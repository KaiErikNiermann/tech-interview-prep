Search.setIndex({"docnames": ["MATERIALS", "_autosummary/sols", "_autosummary/sols.contains_duplicate", "_autosummary/sols.group_anagrams", "_autosummary/sols.longest_cons_seq", "_autosummary/sols.prod_arr_except_self", "_autosummary/sols.three_sum", "_autosummary/sols.top_k_frequent", "_autosummary/sols.two_sum", "_autosummary/sols.valid_anagram", "_autosummary/sols.valid_palindrome", "index"], "filenames": ["MATERIALS.md", "_autosummary/sols.rst", "_autosummary/sols.contains_duplicate.rst", "_autosummary/sols.group_anagrams.rst", "_autosummary/sols.longest_cons_seq.rst", "_autosummary/sols.prod_arr_except_self.rst", "_autosummary/sols.three_sum.rst", "_autosummary/sols.top_k_frequent.rst", "_autosummary/sols.two_sum.rst", "_autosummary/sols.valid_anagram.rst", "_autosummary/sols.valid_palindrome.rst", "index.rst"], "titles": ["Collected materials", "sols", "sols.contains_duplicate", "sols.group_anagrams", "sols.longest_cons_seq", "sols.prod_arr_except_self", "sols.three_sum", "sols.top_k_frequent", "sols.two_sum", "sols.valid_anagram", "sols.valid_palindrome", "Technical interview prep materials"], "terms": {"If": [0, 2, 3, 4, 6, 10], "you": [0, 7], "know": [0, 3], "ani": 0, "other": [0, 3], "good": [0, 10], "book": 0, "add": 0, "email": 0, "them": [0, 3, 9], "misc": 0, "reciev": 0, "proton": 0, "me": 0, "main": 0, "websit": 0, "us": [0, 3, 4, 7, 9, 10], "compani": 0, "practic": [0, 3, 7], "hackerrank": 0, "interview": [0, 7, 10], "kit": 0, "should": 0, "especi": 0, "want": [0, 10], "do": [0, 3, 5], "some": [0, 3], "short": [0, 3], "term": 0, "leetcod": 0, "blind": 0, "75": 0, "seem": [0, 3], "common": [0, 10, 11], "track": [0, 4], "problem": [0, 3, 11], "peopl": 0, "follow": 0, "neetcod": 0, "gener": [0, 10], "ha": [0, 2, 4, 10], "codesign": 0, "also": [0, 10], "thi": [0, 3, 7, 10], "nice": 0, "simpl": 0, "ui": 0, "stuff": 0, "hack": 0, "box": 0, "jake": 0, "i": [0, 2, 3, 4, 5, 6, 7, 8, 10], "basic": [0, 3, 4, 6], "unbeat": 0, "qualiti": 0, "popul": 0, "right": [0, 4, 6], "keyword": 0, "get": 0, "past": [0, 3], "most": 0, "screen": 0, "without": 0, "mani": 0, "modul": [1, 9], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10], "solut": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10], "containsdupl": 2, "num": [2, 4, 5, 6, 7, 8], "list": [2, 3, 4, 5, 6, 7, 8, 11], "int": [2, 4, 5, 6, 7, 8], "bool": [2, 9, 10], "creat": [2, 3, 8, 9], "set": [2, 4], "store": [2, 3, 7, 8, 9], "uniqu": 2, "number": [2, 3, 7], "python": [2, 3, 10], "o": [2, 3, 4, 5, 6, 7, 8, 9, 10], "1": [2, 3, 4, 5, 6, 9, 10], "lookup": [2, 4], "alreadi": 2, "return": [2, 7, 9, 10], "true": [2, 10], "time": [2, 3, 4, 5, 6, 7, 8, 9, 10], "complex": [2, 3, 4, 5, 6, 7, 8, 9, 10], "n": [2, 3, 4, 5, 6, 7, 8, 9, 10], "space": [2, 3, 4, 5, 6, 7, 8, 9, 10], "groupanagram": 3, "str": [3, 9, 10], "re": 3, "word": [3, 9], "frequenc": [3, 7, 9], "defaultdict": 3, "dict": 3, "init": [3, 6], "avoid": [3, 6, 10], "edg": 3, "case": [3, 6], "kei": 3, "we": [3, 5, 6, 7, 8, 9, 10], "iter": [3, 8, 10], "through": [3, 8, 10], "count": 3, "each": [3, 7, 9], "charact": [3, 9, 10], "convert": 3, "tupl": 3, "make": 3, "hashabl": 3, "potenti": 3, "unecessari": 3, "lang": 3, "ord": 3, "c": [3, 5], "map": 3, "ascii": 3, "valu": [3, 6, 7, 8], "between": 3, "0": [3, 6], "25": 3, "give": [3, 5], "u": [3, 5], "index": [3, 7, 8, 11], "increment": [3, 4], "m": 3, "where": [3, 7, 10], "averag": 3, "length": [3, 4, 9], "interestingli": 3, "enough": 3, "actual": 3, "appear": 3, "slower": 3, "than": 3, "sort": [3, 6, 7, 9], "honestli": 3, "im": 3, "too": [3, 6, 10], "sure": 3, "why": 3, "One": 3, "reason": 3, "friend": 3, "mine": 3, "come": 3, "up": 3, "reduc": 3, "log": [3, 6, 7], "though": [3, 7], "test": 3, "even": 3, "consider": 3, "larg": [3, 6], "faster": 3, "addition": 3, "hold": 3, "languag": [3, 10], "For": 3, "algorithm": 3, "3": [3, 6], "11": 3, "nearli": 3, "optim": 3, "mergesort": 3, "anyon": 3, "its": [3, 7], "seemingli": 3, "tell": 3, "groupanagramssort": 3, "similarli": 3, "anagram": 3, "can": [3, 6, 7, 8, 9, 10], "group": 3, "togeth": 3, "dictionari": [3, 7, 8, 9], "groupanagramsfast": 3, "cach": 3, "creation": 3, "function": [3, 10], "recomput": 3, "rest": 3, "code": 3, "same": [3, 10], "befor": 3, "longestconsecut": 4, "neighbor": 4, "logic": 4, "left": 4, "start": [4, 10], "sequenc": 4, "otherwis": 4, "keep": 4, "found": 4, "till": 4, "longest": 4, "idea": [4, 6], "just": [4, 5, 6, 7, 10], "find": 4, "max": 4, "recogn": [4, 8], "end": [4, 10], "productexceptself": 5, "two": [5, 6, 9, 10], "pass": 5, "calcul": 5, "all": 5, "pre": 5, "post": 5, "product": 5, "given": 5, "an": [5, 7, 8, 10], "arrai": [5, 6, 10], "b": [5, 8], "d": 5, "first": 5, "comput": [5, 8], "ab": 5, "abc": 5, "The": 5, "second": 5, "bcd": 5, "cd": 5, "result": [5, 6], "answer": 5, "Its": 5, "cumul": 5, "forward": 5, "backward": 5, "threesum": 6, "broad": 6, "our": 6, "take": 6, "consid": 6, "l": 6, "r": 6, "sinc": [6, 8], "move": [6, 10], "closer": 6, "decreas": 6, "sum": 6, "increas": 6, "skip": 6, "posit": 6, "integ": 6, "imposs": 6, "e": 6, "g": 6, "2": [6, 9], "duplic": 6, "pointer": [6, 10], "setup": 6, "so": 6, "loop": 6, "while": 6, "thei": [6, 9], "havent": 6, "cross": 6, "over": 6, "check": [6, 10], "being": 6, "small": 6, "append": 6, "depend": 6, "implement": 6, "topkfrequ": 7, "k": 7, "place": 7, "element": [7, 8], "bucket": 7, "n1": 7, "n2": 7, "ar": [7, 9, 10], "have": [7, 9, 10], "last": 7, "2n": 7, "topkfrequentcompact": 7, "feel": 7, "like": 7, "could": 7, "speak": 7, "close": 7, "would": 7, "probabl": 7, "expand": 7, "either": 7, "kind": 7, "explain": 7, "twosum": 8, "target": 8, "properti": 8, "idx": 8, "now": 8, "onli": 8, "need": 8, "current": 8, "simpli": 8, "differ": [8, 9], "see": [8, 9, 11], "isanagram": 9, "": [9, 10], "t": 9, "trivial": 9, "fals": [9, 10], "compar": [9, 10], "equal": 9, "isanagramsort": 9, "logn": 9, "isanagramcount": 9, "A": 9, "bit": 9, "cheat": 9, "counter": 9, "from": 9, "collect": 9, "ispalindrom": 10, "Not": 10, "much": 10, "think": 10, "about": 10, "here": 10, "remmber": 10, "built": 10, "lib": 10, "thing": 10, "alot": 10, "member": 10, "rememb": 10, "string": 10, "slice": 10, "notat": 10, "stop": 10, "step": 10, "wai": 10, "revers": 10, "ask": 10, "oa": 10, "constraint": 10, "fine": 10, "ispalindromecompact": 10, "rejex": 10, "along": 10, "lower": 10, "za": 10, "z0": 10, "9": 10, "remov": 10, "everyth": 10, "non": 10, "alphanumer": 10, "approach": 10, "comparison": 10, "ispalindromefunct": 10, "essenti": 10, "more": 10, "origin": 10, "filter": 10, "out": [10, 11], "Then": 10, "ispalindrometwopoint": 10, "extra": 10, "lambda": 10, "reach": 10, "search": 11, "page": 11, "To": 11, "work": 11, "sol": 11}, "objects": {"": [[1, 0, 0, "-", "sols"]], "sols": [[2, 0, 0, "-", "contains_duplicate"], [3, 0, 0, "-", "group_anagrams"], [4, 0, 0, "-", "longest_cons_seq"], [5, 0, 0, "-", "prod_arr_except_self"], [6, 0, 0, "-", "three_sum"], [7, 0, 0, "-", "top_k_frequent"], [8, 0, 0, "-", "two_sum"], [9, 0, 0, "-", "valid_anagram"], [10, 0, 0, "-", "valid_palindrome"]], "sols.contains_duplicate": [[2, 1, 1, "", "Solution"]], "sols.contains_duplicate.Solution": [[2, 2, 1, "", "containsDuplicate"]], "sols.group_anagrams": [[3, 1, 1, "", "Solution"]], "sols.group_anagrams.Solution": [[3, 2, 1, "", "groupAnagrams"], [3, 2, 1, "", "groupAnagramsFast"], [3, 2, 1, "", "groupAnagramsSorting"]], "sols.longest_cons_seq": [[4, 1, 1, "", "Solution"]], "sols.longest_cons_seq.Solution": [[4, 2, 1, "", "longestConsecutive"]], "sols.prod_arr_except_self": [[5, 1, 1, "", "Solution"]], "sols.prod_arr_except_self.Solution": [[5, 2, 1, "", "productExceptSelf"]], "sols.three_sum": [[6, 1, 1, "", "Solution"]], "sols.three_sum.Solution": [[6, 2, 1, "", "threeSum"]], "sols.top_k_frequent": [[7, 1, 1, "", "Solution"]], "sols.top_k_frequent.Solution": [[7, 2, 1, "", "topKFrequent"], [7, 2, 1, "", "topKFrequentCompact"]], "sols.two_sum": [[8, 1, 1, "", "Solution"]], "sols.two_sum.Solution": [[8, 2, 1, "", "twoSum"]], "sols.valid_anagram": [[9, 1, 1, "", "Solution"]], "sols.valid_anagram.Solution": [[9, 2, 1, "", "isAnagram"], [9, 2, 1, "", "isAnagramCounter"], [9, 2, 1, "", "isAnagramSort"]], "sols.valid_palindrome": [[10, 1, 1, "", "Solution"]], "sols.valid_palindrome.Solution": [[10, 2, 1, "", "isPalindrome"], [10, 2, 1, "", "isPalindromeCompact"], [10, 2, 1, "", "isPalindromeFunctional"], [10, 2, 1, "", "isPalindromeTwoPoint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"]}, "titleterms": {"collect": 0, "materi": [0, 11], "textbook": 0, "code": 0, "prep": [0, 11], "softwar": 0, "engin": 0, "sec": 0, "resum": 0, "templat": 0, "sol": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "contains_dupl": 2, "thought": [2, 3, 4, 5, 6, 7, 8, 9, 10], "process": [2, 3, 4, 5, 6, 7, 8, 9, 10], "note": [2, 3, 4, 5, 6, 7, 8, 9, 10], "group_anagram": 3, "longest_cons_seq": 4, "prod_arr_except_self": 5, "three_sum": 6, "top_k_frequ": 7, "two_sum": 8, "valid_anagram": 9, "valid_palindrom": 10, "technic": 11, "interview": 11, "content": 11, "indic": 11, "tabl": 11, "modul": 11}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"Collected materials": [[0, "collected-materials"]], "textbooks": [[0, "textbooks"]], "coding-prep": [[0, "coding-prep"]], "software-engineering": [[0, "software-engineering"]], "sec": [[0, "sec"]], "resume template": [[0, "resume-template"]], "sols": [[1, "module-sols"]], "sols.contains_duplicate": [[2, "module-sols.contains_duplicate"]], "Thought process": [[2, "thought-process"], [3, "thought-process"], [3, "id1"], [3, "id3"], [4, "thought-process"], [5, "thought-process"], [6, "thought-process"], [7, "thought-process"], [7, "id1"], [8, "thought-process"], [9, "thought-process"], [9, "id1"], [10, "thought-process"], [10, "id1"], [10, "id2"], [10, "id3"]], "Notes": [[2, "notes"], [3, "notes"], [3, "id2"], [4, "notes"], [5, "notes"], [6, "notes"], [7, "notes"], [7, "id2"], [8, "notes"], [9, "notes"], [9, "id2"], [10, "notes"], [10, "id4"]], "sols.group_anagrams": [[3, "module-sols.group_anagrams"]], "sols.longest_cons_seq": [[4, "module-sols.longest_cons_seq"]], "sols.prod_arr_except_self": [[5, "module-sols.prod_arr_except_self"]], "sols.three_sum": [[6, "module-sols.three_sum"]], "sols.top_k_frequent": [[7, "module-sols.top_k_frequent"]], "sols.two_sum": [[8, "module-sols.two_sum"]], "sols.valid_anagram": [[9, "module-sols.valid_anagram"]], "sols.valid_palindrome": [[10, "module-sols.valid_palindrome"]], "Technical interview prep materials": [[11, "technical-interview-prep-materials"]], "Contents:": [[11, "contents"]], "Indices and tables": [[11, "indices-and-tables"]], "Modules": [[11, "modules"]]}, "indexentries": {"module": [[1, "module-sols"], [2, "module-sols.contains_duplicate"], [3, "module-sols.group_anagrams"], [4, "module-sols.longest_cons_seq"], [5, "module-sols.prod_arr_except_self"], [6, "module-sols.three_sum"], [7, "module-sols.top_k_frequent"], [8, "module-sols.two_sum"], [9, "module-sols.valid_anagram"], [10, "module-sols.valid_palindrome"]], "sols": [[1, "module-sols"]], "solution (class in sols.contains_duplicate)": [[2, "sols.contains_duplicate.Solution"]], "containsduplicate() (sols.contains_duplicate.solution method)": [[2, "sols.contains_duplicate.Solution.containsDuplicate"]], "sols.contains_duplicate": [[2, "module-sols.contains_duplicate"]], "solution (class in sols.group_anagrams)": [[3, "sols.group_anagrams.Solution"]], "groupanagrams() (sols.group_anagrams.solution method)": [[3, "sols.group_anagrams.Solution.groupAnagrams"]], "groupanagramsfast() (sols.group_anagrams.solution method)": [[3, "sols.group_anagrams.Solution.groupAnagramsFast"]], "groupanagramssorting() (sols.group_anagrams.solution method)": [[3, "sols.group_anagrams.Solution.groupAnagramsSorting"]], "sols.group_anagrams": [[3, "module-sols.group_anagrams"]], "solution (class in sols.longest_cons_seq)": [[4, "sols.longest_cons_seq.Solution"]], "longestconsecutive() (sols.longest_cons_seq.solution method)": [[4, "sols.longest_cons_seq.Solution.longestConsecutive"]], "sols.longest_cons_seq": [[4, "module-sols.longest_cons_seq"]], "solution (class in sols.prod_arr_except_self)": [[5, "sols.prod_arr_except_self.Solution"]], "productexceptself() (sols.prod_arr_except_self.solution method)": [[5, "sols.prod_arr_except_self.Solution.productExceptSelf"]], "sols.prod_arr_except_self": [[5, "module-sols.prod_arr_except_self"]], "solution (class in sols.three_sum)": [[6, "sols.three_sum.Solution"]], "sols.three_sum": [[6, "module-sols.three_sum"]], "threesum() (sols.three_sum.solution method)": [[6, "sols.three_sum.Solution.threeSum"]], "solution (class in sols.top_k_frequent)": [[7, "sols.top_k_frequent.Solution"]], "sols.top_k_frequent": [[7, "module-sols.top_k_frequent"]], "topkfrequent() (sols.top_k_frequent.solution method)": [[7, "sols.top_k_frequent.Solution.topKFrequent"]], "topkfrequentcompact() (sols.top_k_frequent.solution method)": [[7, "sols.top_k_frequent.Solution.topKFrequentCompact"]], "solution (class in sols.two_sum)": [[8, "sols.two_sum.Solution"]], "sols.two_sum": [[8, "module-sols.two_sum"]], "twosum() (sols.two_sum.solution method)": [[8, "sols.two_sum.Solution.twoSum"]], "solution (class in sols.valid_anagram)": [[9, "sols.valid_anagram.Solution"]], "isanagram() (sols.valid_anagram.solution method)": [[9, "sols.valid_anagram.Solution.isAnagram"]], "isanagramcounter() (sols.valid_anagram.solution method)": [[9, "sols.valid_anagram.Solution.isAnagramCounter"]], "isanagramsort() (sols.valid_anagram.solution method)": [[9, "sols.valid_anagram.Solution.isAnagramSort"]], "sols.valid_anagram": [[9, "module-sols.valid_anagram"]], "solution (class in sols.valid_palindrome)": [[10, "sols.valid_palindrome.Solution"]], "ispalindrome() (sols.valid_palindrome.solution method)": [[10, "sols.valid_palindrome.Solution.isPalindrome"]], "ispalindromecompact() (sols.valid_palindrome.solution method)": [[10, "sols.valid_palindrome.Solution.isPalindromeCompact"]], "ispalindromefunctional() (sols.valid_palindrome.solution method)": [[10, "sols.valid_palindrome.Solution.isPalindromeFunctional"]], "ispalindrometwopoint() (sols.valid_palindrome.solution method)": [[10, "sols.valid_palindrome.Solution.isPalindromeTwoPoint"]], "sols.valid_palindrome": [[10, "module-sols.valid_palindrome"]]}})